#include <stdio.h>
#include <stdlib.h>
#include <getopt.h>
#include <string.h>
#include "cilk-lib.cilkh"
#include "cilk.h"
#include "../../shared/util.h"

#define MIN_OPS_PER_THREAD 1

void EXPORT(datapara) (CilkContext *const ctx, ATYPE a[], uint n, uint t);
void EXPORT(rec) (CilkContext *const ctx, ATYPE *a[], uint n);
uint EXPORT(get_proc_count) (CilkContext *const ctx);

cilk uint get_proc_count() {
	printf("Cilk_active_size = %d\n", Cilk_active_size);
	return Cilk_active_size;
}

cilk void inplace_double(ATYPE arr[], uint n, uint k) {
	uint i;
	uint kk = k<<1;
	printf("inplace_double: %d..%d in steps of %d\n", kk-1, n, kk);
	if (n < kk-1) {
		printf("n<kk-1!\n");
		return;
	}
	for (i = kk-1; i < n; i += kk) {
		printf("%d: %p += %p\n", i, arr+i, arr+i-k);
		arr[i] += arr[i-k];
	}
}

cilk void inplace_halve(ATYPE arr[], uint cnt, uint k) {
	uint kk = k/2;
	uint i;
	for (i = 0; i < cnt*k; i += k) {//
		printf("%i: %p += %p\n", i, arr+i+kk, arr+i);
		arr[i+kk] += arr[i];
	}
}

cilk void datapara(ATYPE arr[], uint n, uint t) {
	uint k, kk, i;
	for (k = 1; k < n; k = kk) {
		uint ratio;
		uint units;
		#ifdef DBG
			uint start, end;
		#endif
		kk = k<<1; // double
		units = n/kk;
		ratio = units/t;
		#ifdef DBG
			start = kk-1;
			end = n;
			printf("double: n=%d, k=%d, start=%d, end=%d, step=%d, units=%d, ratio=%d\n", n, k, start, end, kk, units, ratio);
		#endif
		if (ratio < MIN_OPS_PER_THREAD) {
			for (i = kk-1; i < n; i += kk) {
				printf("%d: %p += %p\n", i, arr+i, arr+i-k);
				arr[i] += arr[i-k];
			}
		} else {
			i = 0;
			if (ratio > 0) {
				for (; i < units-ratio; i += ratio) {
					printf("%d: spawn %d starting at %d\n", i, ratio, kk-1 + i*kk);
					spawn inplace_double(arr + i*kk, ratio*kk, k);
				}
			}
			if (i < units) { // i == 0
				printf("%d+: spawn %d starting at %d\n", i, (units - i), kk-1 + i*kk);
				spawn inplace_double(arr + i*kk, (units - i)*kk, k);
			}
			sync;
		}
	}

	for (k = k>>1; k > 1; k = kk) {
		uint start,  ratio, end;
		uint units, diff;
		kk = k>>1; // halve

		start = k-1;
		end = n-kk;
		units = (end-start)/k;
		diff = (end-start) - (units * k);
		ratio = units/t;
		printf("halve: n=%d, k=%d, start=%d, end=%d, step=%d, units=%d, ratio=%d\n", n, k, start, end, k, units, ratio);
		if (ratio < MIN_OPS_PER_THREAD) {
			for (i = k-1; i < n-kk; i += k) {
				printf("%d: %p += %p\n", i+kk, arr+i+kk, arr+i);
				arr[i+kk] = arr[i] + arr[i+kk];
			}
		} else {
			i = 0;
			if (end > start) {
				if (ratio > 0) {
					for (; i < units-ratio; i += ratio) {
						printf("%d: spawn %d starting at %d\n", i, ratio, k-1 + kk + i*k);
						spawn inplace_halve(arr + i*k + k-1, ratio, k);
					}
				}
				if (i < units) {
					printf("%d+: spawn %d starting at %d\n", i, (units - i), k-1 + kk + i*k);
					spawn inplace_halve(arr + i*k + k-1, (units - i), k);
					i++;
				}
				sync;
				if (diff != 0) {
					printf("units not exact! diff = %d. starting at %d\n", diff, end-diff+kk);
					for (i = end - diff; i < end; i += k) {
						printf("%d: %p += %p\n", i+kk, arr+i+kk, arr+i);
						arr[i+kk] = arr[i] + arr[i+kk];
					}
				}
			}
		}
	}
}

cilk void reduce_rec(ATYPE arr[], uint n) {
	if (n > 3) {
		spawn reduce_rec(arr + 0, n/2);
		spawn reduce_rec(arr + n/2, n - n/2);
		sync;
		arr[n-1] += arr[n/2-1];
	} else if (n > 1) { // n = 2 or 3. 2: we add up, 3: we add up and leave the odd one in place
		arr[1] = arr[0] + arr[1];
	} else if (n == 1)
		; // nothing todo
}

cilk void halfsum_rec(ATYPE a[], uint lower, uint upper, uint p) {
	uint i;
	for (i = lower-1; i < upper-1; i+=p/2) {
		a[i+p/4] += a[i];
	}
}
cilk void combine_rec(ATYPE a[], uint n, uint p) {
	if (p > 2) {
		spawn halfsum_rec(a, p/2, p, p);
		spawn halfsum_rec(a, p  , n, p);
		sync; // FIXME: nochmal anschauen. kann man sich das nicht sparen?
		spawn combine_rec(a, n, p/2);
	}
}

cilk void rec(ATYPE *arr[], uint n) {
	uint n_n = roundUpPowerOf2(n);
	ATYPE *a_n = realloc(*arr, sizeof(ATYPE) * n_n);
	if (a_n == NULL) {
		fprintf(stderr, "Could not reallocate array!\n");
		return;
	}
	spawn reduce_rec(a_n, n_n);
	sync;
	a_n[n_n - n_n/4 - 1] += a_n[n_n - n_n/2 - 1];
	spawn combine_rec(a_n, n_n, n_n/2);
	*arr = a_n;
}

enum algo {data, task};
int main(int argc, char *argv[]) {
	Cilk_time timestamp; // oh cilk i hate you so much. try narrowing its scope to see why.
	CilkContext* ctx;
	ATYPE *arr;
	ATYPE *cor;
	char opt;
	int option_index;
	uint t = 0;
	uint n = 0;
	enum algo algo = task;
	static const char optstring[] = "n:a:";
	static const struct option long_options[] = {
		{"nproc",		1, NULL, 't'},
		{NULL,			0, NULL, 0},
	};
	int ret = 0;

	while ((opt = getopt_long(argc, argv, optstring, long_options, &option_index)) != EOF) {
		switch (opt) {
		case 't':
			t = atoi(optarg); // TODO: error handling
			break;
		case 'n':
			n = atoi(optarg); // TODO: error handling
			break;
		case 'a':
			if (strcmp("data", optarg) == 0) {
				printf("Using data parallel algorithm\n");
				algo = data;
			} else if (strcmp("task", optarg) == 0) {
				printf("Using task parallel algorithm\n");
				algo = task;
			} else
				fprintf(stderr, "Warning: unknown algorithm %s, using default.\n", optarg);
			break;
		default:
			usage_abort();
			break;
		}
	}

	if (optind < argc) {
		fprintf(stderr, "Warning: Extra parameters found.\n");
	}

	if (n == 0) {
		fprintf(stderr, "Legal array size n required!\n");
		usage_abort();
	}

	ctx = Cilk_init(&argc, argv);
	if(ctx == NULL)
		return EXIT_FAILURE;

	n = EXPORT(get_proc_count)(ctx);

	arr = malloc(sizeof(ATYPE) * n);
	if (arr == NULL)
		return EXIT_FAILURE;

	arr = fillArr(arr, n);

	cor = malloc(sizeof(ATYPE) * n);
	if (cor == NULL)
		return EXIT_FAILURE;

	prefixSums(arr, n, false, cor);

	timestamp = Cilk_get_wall_time();
	if (algo == data) {
		EXPORT(datapara)(ctx, arr, n, t);
	} else
		EXPORT(rec)(ctx, &arr, n);
	timestamp = Cilk_get_wall_time() - timestamp;

	Cilk_terminate (ctx);
	if (n < 100)
		printArrs(cor, arr, n);

	ret = memcmp(cor, arr, sizeof(ATYPE) * n);
	printf("Correct? %s\n", ret == 0 ? "yes" : "no");
	printf("%f s elapsed in %d threads.\n", Cilk_wall_time_to_sec(timestamp), t);

	free(cor);
	free(arr);

	return ret;
}
